import sys
import os.path
import calypso
from pylons import session
from calypso.model.meta import Session as sqlsession

class Messages:
    msgmodule=None
    

class Monitor(object):
    """
    Class representing a monitor associated with a topic.  Monitors can have
    multiple attributes, each being atomic (i.e. a single int, boolean, float,...)
    """
    
    name=None
    format=None
    dao=None
    table=None
    index = 0
    monitors={}


    def connect(self):
        """
        Connect this monitor to the underlying (shared mmeory) data transport,
        thereby enabling it to read values that have been published
        """
        if self.name=='':
            self._fields=[]
            self._fields.append(('Click plus',None))
        elif self.dao==None:
            self.dao = Messages.msgmodule.__dict__[self.name+"_DAO"]
            self._fields = self.dao.Struct._fields_

    def disconnect(self):
        self.dao=None
        self._fields=None


    def __init__(self,name,format=None):
        self.name = name
        self.id='m'+str(Monitor.index)
        self.dao=None
        Monitor.index=Monitor.index+1
        if not Monitor.monitors.has_key(name):
            Monitor.monitors[name]=self
        else:
            self.id=Monitor.monitors[name].id
        self.connect()
            
    def get_name(self):
        return self.name
        
    def value(self,filtered=[]):
        """
        Return the value of the monitor
        """
        if self.dao==None:
            self.connect()
        value=self.dao.capture_data()
        #flatten the data:
        retval=[]
        for field in self._fields:
            val=value[field[0]]
            if hasattr(val,'__len__'):
                if (field[0] in filtered):
                    index=0
                    for item in val:
                        index=index+1
                        if ((field[0]+"["+str(index)+"]") in filtered):
                            retval.append(item)
            else:
                if (field[0] in filtered):
                    retval.append(val)
        return retval
    

    def attrs(self,filtered=None):
        """
        Return the attributes of this monitor as a flat array of items.
        """
        retval=[]
        attrindex=0
        for field in  self._fields:
            if hasattr(field[1],'__len__'):
                #have array, so append each element one by one:
                index=0
                for i in field[1]():
                    index=index+1
                    attrname=field[0]+"["+str(index)+"]"
                    if (filtered==None) or (attrname in filtered) or (field[0] in filtered):
                        retval.append([field[0]+"["+str(index)+"]","a"+str(attrindex)])
                        attrindex=attrindex+1
            else:
                if filtered==None or (field[0] in filtered):
                    retval.append([field[0],"a"+str(attrindex)])
                    attrindex=attrindex+1
        return retval




class Format(object):
    """
    A collection of monitors
    """
    everything={}
    DEFAULT_FORMAT=None
    formats={}
    
    def __init__(self,name):
        """
        Load a format from the database given a name for the format
        """
        if (name.startswith('<')):
            raise Exception("invalid type")
        self.name=name
        self.monitors=sqlsession.query(Monitor).filter_by(format=name).all()
        self.monitortable={}
        for monitor in self.monitors:
            self.monitortable[monitor.name]=monitor
            Format.everything[monitor.name]=monitor
        Format.formats[name]=self

    def get_name(self):
        return self.name

    @staticmethod
    def get_format(name):
        if Format.formats.has_key(name):
            return Format.formats[name]
        return Format(name)
    
    def append(self,monitor):
        """
        Add a monitor explicitly to this format
        """
        if not(isinstance(monitor, Monitor)):
            raise Exception("Type error")
        self.monitors.append(monitor)
        self.monitortable[monitor.get_name()]=monitor
        Format.everything[monitor.get_name()]=monitor
        

    def sorted_monitors(self):
        items=self.monitortable.items()
        items.sort()
        return [value for key,value in items]

    def get_monitor(self,name):
        return self.monitortable[name]
    
    def has_monitor(self,name):
        """
        Return whether this format has a monitor with the given name
        """
        return self.monitortable.has_key(name)

    def snapshot(self):
        """
        Return a dictionary of values for the monitors
        """
        retval={}
        for monitor in self.monitors:
            retval[monitor.id]=monitor.value()
        return retval

    def connect(self):
        for monitor in self.monitors:
            monitor.connect()


def clear():
    for key, monitor in  Monitor.monitors.iteritems():
        monitor.disconnect()

    

import sqlalchemy
from sqlalchemy.schema import Column
from sqlalchemy.types import *
import calypso.model.meta
metadata=calypso.model.meta.metadata

    
Monitor.table=sqlalchemy.Table('formats', metadata,
                               Column('name',String(80), primary_key=True),
                               Column('format',String(80), primary_key=True),
                               useexisting=True)

"""map tables to database"""
sqlalchemy.orm.mapper(Monitor, Monitor.table)



import os
import platform
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__)))+'/scenarios')


def load(configuration):
    modulename="sim_messages"
    sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__)))+'/scenarios/'+configuration + '/'+ os.uname()[0] + '_' + platform.machine() + '/lib')
    sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__)))+'/scenarios/'+configuration)
    Messages.msgmodule=__import__(modulename, globals(), locals(), ['System_Stats_IO'],-1)
    Format.DEFAULT_FORMAT=Format("Default")
    for item in dir(Messages.msgmodule):
        if item.endswith('_DAO') and (item != 'Base_DAO'):
            monitor=Monitor(item.replace('_DAO',''))# Format.DEFAULT_FORMAT)
            monitor.connect()
            Format.DEFAULT_FORMAT.append(monitor)
    Format.DEFAULT_FORMAT.connect()
 
