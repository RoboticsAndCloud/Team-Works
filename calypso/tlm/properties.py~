import copy
import sys
from calypso.model.meta import Session as sqlsession


class DisplayPropertyItem(object):
    """
    Class to hold a property of a tile display
    """
    dao   = None

    class DAO(object):
        table = None

        def __init__(self, name, user, ownername, displayname, value, type):
            self.name=name
            self.user=user
            self.parent=ownername
            self.display=displayname
            self.type=type
            if value==None:
                self.value='0'
            else:   
                self.value=value
            sqlsession.add(self)
            sqlsession.commit()
       
        def commit_change(self):
            sqlsession.commit()
        
        def set_type(self, type):
            self.type=type
            self.commit_change()
                
        
        def set_owner(self, owner):
            self.parent=owner.get_name()
            self.commit_change()
            
        def set_display(self, display):
            self.display=display.get_name()

           
        def set_value(self, value):
            self.value = value
            self.commit_change()
                
            
    def __init__(self, name, user,  owner, displayname, value, type):
        self.name=name
        self.owner=owner
        daos= sqlsession.query(DisplayPropertyItem.DAO).filter_by(name=name, user=user, display=displayname, parent=owner.get_name()).all()
        if len(daos)>0:
            self.dao =daos[0]
            self.dao.type=type
        else:
            if (name=='col_span' or name=='row_span') and value==None:
                value=1
            elif value==None:
                value=0
            self.dao=DisplayPropertyItem.DAO(name=name, user=user, ownername=owner.get_name(), displayname=displayname, value=value, type=type)
     
    def type(self):
        return self.dao.type
    
    def set_type(self, type):
        self.owner.paramlist.append({'name':self.name, 'param':self})        
        self.dao.set_type(type)

    def set_owner(self, owner):
        self.dao.set_owner(owner)
        
    def set_display(self, display):
        self.dao.set_display(display)
        
    def copy_to(self, displayname):
        sqlsession.commit()
        newdao=DisplayPropertyItem(name=self.dao.name, user=self.dao.user, owner=self.owner, displayname=displayname, value=self.dao.value, type=self.dao.type).dao
        self.dao=None
        self.dao=newdao
        sqlsession.commit()
 
    def set_value( self, value ):
        self.dao.set_value(str(value))
            
    def __call__(self):
        """
        Treat this class like a function to be called with no parameters
        It will return the value of the property item it holds
        """
        try:
           sqlsession.add(self.dao)
        except:
            pass
        try:
            if self.name=='x_pos' or self.name=='y_pos' or \
                   self.name=='col_span' or self.name=='row_span':
                return int(self.dao.value)
            else:
                return self.dao.value
        except:
            import traceback
            traceback.print_exception(sys.exc_info()[0], sys.exc_info()[1], sys.exc_info()[2])
            return ''

    def delete(self):
        """
        Remove from database
        """
        if self.dao != None:
            sqlsession.flush()
            sqlsession.delete(self.dao)
            sqlsession.commit()
            del self.dao


class DisplayProperties:
    """
    Class to capture display properties for displaying tiles within a table or in a plot
    """
    
    def __init__(self, name, user, parent, display, x_pos=None, y_pos=None, col_span=None, row_span=None,  width=400, height=300, **kargs):
        self.name=name
        self.user=user
        self.parent=parent
        self.display=display
        self.params={}
        self.basic_params={}
        self.paramlist=[]
        self.x_pos=DisplayPropertyItem( name="x_pos", user=user, owner=self, displayname=display.get_name(), value=x_pos,type='integer')
        self.y_pos=DisplayPropertyItem( name="y_pos", user=user, owner=self, displayname=display.get_name(),value=y_pos,type='integer')
        self.col_span=DisplayPropertyItem( name="col_span", user=user, owner=self, displayname=display.get_name(), value=col_span,type='integer')
        self.row_span=DisplayPropertyItem( name="row_span", user=user, owner=self, displayname=display.get_name(),value=row_span,type='integer')
        self.Width=DisplayPropertyItem( name="Width", user=user, owner=self, displayname=display.get_name(), value=width,type='integer')
        self.Height=DisplayPropertyItem( name="Height", user=user, owner=self, displayname=display.get_name(),value=height,type='integer')
        self.basic_params['x_pos'] = self.x_pos
        self.basic_params['y_pos'] = self.y_pos
        self.basic_params['width'] = self.Width
        self.basic_params['height'] = self.Height
        self.basic_params['col_span'] = self.col_span
        self.basic_params['row_span'] = self.row_span
        for key,value in kargs.iteritems():
            self.__dict__[key]=DisplayPropertyItem( name=key, user=user, owner=self, displayname=display.get_name(),value=str(value),type='string')
            self.params[key]=self.__dict__[key]
        self.selected=False
        

    def get_name(self):
        return self.name
    
    def set_name(self, name):
        self.name = name
        self.x_pos.set_owner(self)
        self.y_pos.set_owner(self)
        self.col_span.set_owner(self)
        self.row_span.set_owner(self)
        for key,param in self.params.iteritems():
            param.set_owner(self)

    def set_display(self, display):
        self.display=display
        for key,param in self.params.iteritems():
            param.set_display(display)

    def copy_to(self, displayname):
        for key,param in self.params.iteritems():
            param.copy_to(displayname)

    def copy(self, newparent):
        if self.parent.get_name()==newparent.get_name():
            return self
        cpy=self
        cpy.name=copy.deepcopy(self.name)
        cpy.parent=newparent
        cpy.params={}        
        cpy.x_pos=DisplayPropertyItem( "x_pos", self.dao.user, newparent, self.display.get_name(), self.x_pos(), self.x_pos.type)
        cpy.y_pos=DisplayPropertyItem( "y_pos", self.dao.user, newparent, self.display.get_name(), self.y_pos(),self.y_pos.type)
        cpy.col_span=DisplayPropertyItem( "col_span", self.dao.user, newparent, self.display.get_name(),self.col_span(),self.col_span.type)
        cpy.row_span=DisplayPropertyItem( "row_span",self.dao.user, newparent, self.display.get_name(),self.row_span(),self.row_span.type)
        for key,value in self.params.iteritems():
            cpy.__dict__[key]= DisplayPropertyItem( key, self.dao.user, newparent, self.display.get_name(),value(), value.type)
            cpy.params[key]  = cpy.__dict__[key]
        return cpy

    def delete(self):
        self.x_pos.delete()
        self.y_pos.delete()
        self.col_span.delete()
        self.row_span.delete()
        for key in self.params:
            self.params[key].delete()
                        
    @staticmethod
    def create_properties(name, user, parent, display, x_pos, y_pos, type, **kargs):
        return PROPERTIES_MAP[type](name=name, user=user, parent=parent, display=display, x_pos=x_pos, y_pos=y_pos, **kargs)


class PieChartDisplayProperties(DisplayProperties):
    pass


class SnapshotDisplayProperties(DisplayProperties):
    pass

class TableDisplayProperties(DisplayProperties):

    def __init__ (self,name, user, parent, display, x_pos=None, y_pos=None, col_span=None, row_span=None, monitor_name_as_title=False):
        DisplayProperties.__init__(self, name=name, user=user, parent=parent, display=display,
                                   x_pos=x_pos, y_pos=y_pos, col_span=col_span, row_span=row_span, 
                                   Monitor_Name_as_Title = monitor_name_as_title)
        self.params['Monitor_Name_as_Title'].set_type('boolean')



class HeatmapDisplayProperties(DisplayProperties):

    def __init__ (self, name, user, parent, display, x_pos=None, y_pos=None, col_span=None, row_span=None, 
                  lower_bound=0, upper_bound=100, yellow_mark=50, width=200, height=100):
        DisplayProperties.__init__(self, name=name, user=user, parent=parent,display=display,
                                    x_pos= x_pos, y_pos=y_pos, col_span=col_span, row_span=row_span,
                                    Lower_Bound = lower_bound, Upper_Bound = upper_bound, Yellow_Mark=yellow_mark,
                                     Height=height, Width=width)
        self.params['Lower_Bound'].set_type('float')
        self.params['Upper_Bound'].set_type('float')
        self.params['Yellow_Mark'].set_type('float')



class TimeSeriesDisplayProperties(DisplayProperties):

    def __init__ (self, name, user, parent, display, x_pos=None, y_pos=None, col_span=None, row_span=None, ymin= 0, ymax = 100, timespan=60, width=600, height=400, bgColor='none',gridColor='none'):
        DisplayProperties.__init__(self, name, user, parent, display, x_pos, y_pos, col_span, row_span, 
                                   Min_Value=ymin, Max_Value=ymax, Time_Span=timespan, Height=height, Width=width, Background_Color=bgColor, Grid_Color=gridColor)
        self.params['Min_Value'].set_type('float')
        self.params['Max_Value'].set_type('float')
        self.params['Time_Span'].set_type('float')
        self.params['Background_Color'].set_type('string')
        self.params['Grid_Color'].set_type('string')
      



class GaugeDisplayProperties(DisplayProperties):

    def __init__ (self, name, user, parent, display, x_pos=None, y_pos=None, col_span=None, row_span=None, min = 0, yellowmark=75, redmark=85, max=100, width=300, height=200):
        DisplayProperties.__init__(self, name, user, parent, display, x_pos=x_pos, y_pos=y_pos, col_span=col_span, row_span=row_span, 
                                   Width=width, Height=height,
                                   Min_Value=min, Yellow_Mark=yellowmark, Red_Mark = redmark, Max_Value=max)
        self.params['Min_Value'].set_type('float')
        self.params['Max_Value'].set_type('float')
        self.params['Yellow_Mark'].set_type('float')
        self.params['Red_Mark'].set_type('integer')
        
class ColumnChartDisplayProperties(DisplayProperties):

    def __init__ (self, name, user, parent, display, x_pos=None, y_pos=None, col_span=None, row_span=None, min = 0, max=100, width=300, height=200):
        DisplayProperties.__init__(self, name, user, parent, display, x_pos=x_pos, y_pos=y_pos, col_span=col_span, row_span=row_span, 
                                   Width=width, Height=height,
                                   Min_Value=min,  Max_Value=max)
        self.params['Min_Value'].set_type('float')
        self.params['Max_Value'].set_type('float')
      



PROPERTIES_MAP = {'heatmap': HeatmapDisplayProperties,
                  'gauge' : GaugeDisplayProperties,
                  'piechart' : PieChartDisplayProperties,
                  'areachart':TimeSeriesDisplayProperties,
                  'linechart':TimeSeriesDisplayProperties,
                  'barchart':TimeSeriesDisplayProperties,
                  'table' : TableDisplayProperties,
                  'columnchart': ColumnChartDisplayProperties}

####################################################
####################################################

import sqlalchemy
from sqlalchemy.schema import Column, ForeignKey
from sqlalchemy.types import *
import calypso.model.meta
metadata=calypso.model.meta.metadata


DisplayPropertyItem.DAO.table=sqlalchemy.Table("TlmDisplayPropertyItems", metadata,
                                               Column('user', String(40), primary_key=True),
                                               Column('name',String(80), primary_key=True),
                                               Column('parent',String(80),ForeignKey('TlmTiles.name'), primary_key=True),
                                               Column('display',String(80),  ForeignKey('TlmDisplays.name'), primary_key=True),
                                               Column('value',String(80)),
                                               useexisting=True)


sqlalchemy.orm.mapper(DisplayPropertyItem.DAO, DisplayPropertyItem.DAO.table)
